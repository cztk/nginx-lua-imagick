user www-data;
worker_processes auto;
pid /run/nginx.pid;
error_log /var/log/nginx/error.log;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

	sendfile on;
	tcp_nopush on;
	types_hash_max_size 2048;

    gzip off;
    # enbale if you remove headers anyway and use them for logging inbetween
    server_tokens off;

    lua_package_path "/etc/nginx/lua/thumb/?.lua;;";

    init_by_lua_block {
        local ffi = require "ffi";
        require "magick";
        require "/etc/nginx/lua/thumb/thumb_config";
        require "/etc/nginx/lua/thumb/thumb_utils";
        require "/etc/nginx/lua/thumb/image_processor";

    }

    server {
        listen       80;
        server_name  img-1.local;
        root /var/www/html;


        location ~* /thumb/(?<width>\d+)x(?<height>\d+)/(?<filename>.+?)(?:\.(?<ext>[^.]+))?$ {
            set $quality 75;
            if ($arg_quality) {
                set $quality $arg_quality;
            }
            try_files $uri @thumb;
        }

        # It should be possible to do "Statically Linking" using lujait when building from source
        # Also I hacked myself a loophole for reasons, be aware
        # if not width or not height or not (height == 30 or config.allowed_dimensions[width .. "x" .. height]) then
        location @thumb {
            content_by_lua_block {
                local thumb = require "/etc/nginx/lua/thumb/image_processor"

                local width = tonumber(ngx.var.width)
                local height = tonumber(ngx.var.height)
                local filename = ngx.var.filename
                local ext = ngx.var.ext
                local quality = tonumber(ngx.var.quality)

                thumb.process_image(width, height, filename, ext, quality)
            }
        }
    }
}
